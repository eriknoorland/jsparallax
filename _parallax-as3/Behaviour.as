/** * @package nl.eriknoorland.parallax */package nl.eriknoorland.parallax{	import nl.eriknoorland.parallax.Axis;	import nl.eriknoorland.parallax.targets.ITarget;	import nl.eriknoorland.parallax.targets.MousePointer;		public class Behaviour{		public static const CONTINUE_TO_DESTINATION:String = 'continue_to_destination';		public static const RETURN_TO_ORIGIN:String = 'return_to_origin';		public static const STOP_MOVEMENT:String = 'stop_movement';				private var _target:ITarget;		private var _ease:Number = 0.05;		private var _axis:String = Axis.BOTH;		private var _invert:String = Axis.NONE;		private var _outOfBounds:String = Behaviour.CONTINUE_TO_DESTINATION;				/**		 * Behaviour - Constructor		 * @param ITarget - 		 * @param String - The axis we want to move. The options are Axis.X, Axis.Y or Axis.BOTH. The default value is Axis.BOTH		 */		public function Behaviour(a:String = null, target:ITarget = null){			if(a != Axis.X && a != Axis.Y && a != Axis.BOTH) a = Axis.BOTH;			_axis = a;			if(target == null) target = new MousePointer;			_target = target;		}				/**		 * Sets the target to follow		 * @param ITarget		 * @return void		 */				public function set target(t:ITarget):void{			_target = t;		}				/**		 * Returns the target to follow		 * @return ITarget		 */		public function get target():ITarget{			return _target;		}				/**		 * Sets the axis in wich way the engine moves		 * @param String - The options are: Axis.X, Axis.Y or Axis.BOTH. The default value is Axis.BOTH		 * @return void		 */		public function set axis(a:String):void{			if(a != Axis.X && a != Axis.Y && a != Axis.BOTH) a = Axis.BOTH;			_axis = a;		}				/**		 * Returns the axis in wich way the engine moves		 * @return String		 */		public function get axis():String{			return _axis;		}				/**		 * Sets the ease		 * @param Number - The default value is 0.05		 * @return void		 */		public function set ease(e:Number):void{			_ease = e;		}				/**		 * Returns the ease		 * @return Number		 */		public function get ease():Number{			return _ease;		}				/**		 * Sets the axis in wich way the engine moves		 * @param String - The options are: Axis.X, Axis.Y, Axis.BOTH or Axis.NONE. The default value is Axis.NONE		 * @return void		 */		public function set invert(i:String):void{			if(i == Axis.X || i == Axis.Y || i == Axis.BOTH || i == Axis.NONE) _invert = i;		}				/**		 * Returns the axis in wich way the engine moves		 * @return String		 */		public function get invert():String{			return _invert;		}				/**		 * Sets the out of bounds behaviour		 * @param String - The options are: Behaviour.CONTINUE_TO_DESTINATION, Behaviour.RETURN_TO_ORIGIN or Behaviour.STOP_MOVEMENT. The default is Behaviour.CONTINUE_TO_DESTINATION		 * @return void		 */		public function set outOfBounds(o:String):void{			if(o == Behaviour.CONTINUE_TO_DESTINATION || o == Behaviour.RETURN_TO_ORIGIN || o == Behaviour.STOP_MOVEMENT) _outOfBounds = o;		}				/**		 * Returns the out of bounds behaviour		 * @return String		 */		public function get outOfBounds():String{			return _outOfBounds;		}	}}